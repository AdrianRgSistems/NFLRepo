@page "/"
@using Radzen
@inject HttpClient _HttpClient
@inject AuthenticationStateProvider auth
@inject IWeekService weekService

<AuthorizeView>
    <NotAuthorized>
        <h1>Bienvenido!</h1>
        Inicia sesion o registrate para continuar.
    </NotAuthorized>
    <Authorized>
        @if (weekinprogress > 0)
        {
            @if (weekinprogress == 1)
            {
                <h5>
                    Registro Abierto Seman #@week.WeekNumber
                </h5>
                    <hr/>
                    @if (spools != null)
                    {
                        <h6>Participantes registrados @spools.Participants</h6>
                        <h6>Monto acumulado: $@spools.Amount</h6>
                        <hr />
                        <RadzenCard>
                            <h4>Juegos de la semana</h4>
                            @{
                                var dateLast = new DateTime();
                                @foreach (var item in week.Games.OrderBy(x => x.Date))
                                {
                                    var date = item.Date;
                                    if (dateLast != date)
                                    {
                                        <hr />
                                        <h6 class="d3-o-section-title">@item.Date.Value.ToLongDateString()</h6>
                                        <hr />
                                    }
                                    <div class="d-flex">
                                        <TeamCard team="@item.VisitorNavigation" itsOver="true" score="@item.VisitorScore.Value"></TeamCard>
                                        <span class="m-2">vs</span>
                                        <TeamCard team="@item.LocalNavigation" itsLocal="true" itsOver="true" score="@item.LocalScore.Value"></TeamCard>
                                    </div>
                                    dateLast = date.Value;

                                }
                            }
                        </RadzenCard>

                    }
            }
            else if (weekinprogress == 2)
            {
                <span>
                    en progreso...
                </span>
            }
            else
            {
                <span>
                    Semana Finalizada, espera la proxima semana
                </span>
            }
        }
        else
        {
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px;"/>
        }
    </Authorized>
</AuthorizeView>


@code {
    public Games games { get; set; }
    public WeekDTO week { get; set; }
    public SpoolDTO spools { get; set; }

    int weekinprogress = 0;

    protected override async Task OnInitializedAsync()
    {

        var authstate = await auth.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (user.Identity.IsAuthenticated) await GetWeek();
    }

    private async Task GetWeek()
    {
        var resp = await _HttpClient.GetFromJsonAsync<WeekDTO>("/api/Weeks/current");
        if (resp != null)
        {
            week = resp;
            weekinprogress = week.Status.Value;
            await GetSpools();
        }
    }

    private async Task GetSpools()
    {
        var resp = await _HttpClient.GetFromJsonAsync<SpoolDTO>($"api/spool/{week.WeekNumber}");
        spools = resp;
    }

}